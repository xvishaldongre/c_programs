[
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-for-punctuation-characters-using-the-ispunct-function/",
        "title": "C program to check for punctuation characters using the ispunct() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C program to check for punctuation characters using the ispunct() Function In this program we will check if a character is a punctuation character or not. We will be using a system defined function ispunct() defined under the ctype.h library.\nAgain, this can be done using if-else block condition using the range of ASCII values of punctuation characters. This method is used for various valid password checking options where atleast one punctuation character is mandatory.\nBelow is a program on ispunct() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); /* As datatypes are int, hence all the variables store the ASCII values of the character on the rhs */ int var1 = \u0026#39;D\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39;/\u0026#39;; int var4 = \u0026#39;,\u0026#39;; /* Returns true if the input parameter is an ASCII value of a punctuation character */ if(ispunct(var1)) { printf(\u0026#34;\\nvar1 = |%c| is a punctuation character\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not a punctuation character\\n\u0026#34;, var1); } if(ispunct(var2)) { printf(\u0026#34;\\nvar2 = |%c| is a punctuation character\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not a punctuation character\\n\u0026#34;, var2); } if(ispunct(var3)) { printf(\u0026#34;\\nvar3 = |%c| is a punctuation character\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not a punctuation character\\n\u0026#34;, var3); } if(ispunct(var4)) { printf(\u0026#34;\\nvar4 = |%c| is a punctuation character\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not a punctuation character\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-for-whitespace-using-isspace-function/",
        "title": "C Program to check for whitespace using isspace() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to check for whitespace using isspace() Function In this program we will check white spaces as well as tabs. We will be using a system defined function isspace() defined under the ctype.h library.\nThis can be done using if-else block, condition being the ASCII value of the space character.\nThis method is used for various valid password checking options as well as the variable names in the C compiler as valid names shall not contain white spaces.\nBelow is a program on isspace() function.\nint always considers the last character as valid, of a given series of characters.\nLeading spaces of a character are not considered as spaces.\nTrailing spaces are considered as spaces.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); int var1 = \u0026#39; d\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39;\\t\u0026#39;; int var4 = \u0026#39;a \u0026#39;; /* Returns true if the input parameter is an ASCII value of a white-space character */ if(isspace(var1)) { printf(\u0026#34;\\nvar1 = |%c| is a white-space character\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not a white-space character\\n\u0026#34;, var1); } if(isspace(var2)) { printf(\u0026#34;\\nvar2 = |%c| is a white-space character\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not a white-space character\\n\u0026#34;, var2); } if(isspace(var3)) { printf(\u0026#34;\\nvar3 = |%c| is a white-space character\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not a white-space character\\n\u0026#34;, var3); } if(isspace(var4)) { printf(\u0026#34;\\nvar4 = |%c| is a white-space character\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not a white-space character\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-if-character-is-alphabet-using-isalpha-function/",
        "title": "C Program to check if character is alphabet using isalpha() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to check if character is alphabet using isalpha() Function In this program we will check if a character is an alphabet or not. We will be using a system defined function isalpha() defined under the ctype.h library.\nThis can also be done using if-else blocks condition using the range of the ASCII values of the alphabets. This method is used for various valid password checking options.\nBelow is a program on isalpha() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); /* As datatypes are int, hence all the variables store the ASCII values of the character on the rhs */ int var1 = \u0026#39;D\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39;a\u0026#39;; int var4 = \u0026#39; \u0026#39;; /* Returns true if the input parameter is an ASCII value of an alphabet character */ if(isalpha(var1)) { printf(\u0026#34;\\nvar1 = |%c| is alphabet\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not alphabet\\n\u0026#34;, var1); } if(isalpha(var2)) { printf(\u0026#34;\\nvar2 = |%c| is alphabet\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not alphabet\\n\u0026#34;, var2); } if(isalpha(var3)) { printf(\u0026#34;\\nvar3 = |%c| is alphabet\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not alphabet\\n\u0026#34;, var3); } if(isalpha(var4)) { printf(\u0026#34;\\nvar4 = |%c| is alphabet\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not alphabet\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-if-character-string-is-alphanumeric-using-isalnum-function/",
        "title": "C Program to check if character string is alphanumeric using isalnum() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to check if character string is alphanumeric using isalnum() Function In this program we will check if character string is alphanumeric(either an alphabet or a number or both). We will be using a system defined function isalnum() defined under the ctype.h library for this. This method is used for various valid password checking options.\nBelow is a program on isalnum() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; // to make use of system defined function isalnum() int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); /* As datatypes are int, hence all the variables store the ASCII values of the character on the RHS */ int var1 = \u0026#39;d\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39;%\u0026#39;; int var4 = \u0026#39; \u0026#39;; /* Returns true if the input parameter is an ASCII value of an alphanumberic character */ if(isalnum(var1)) { printf(\u0026#34;\\nvar1 = |%c| is alphanumeric\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not alphanumeric\\n\u0026#34;, var1); } if(isalnum(var2)) { printf(\u0026#34;\\nvar2 = |%c| is alphanumeric\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not alphanumeric\\n\u0026#34;, var2); } if(isalnum(var3)) { printf(\u0026#34;\\nvar3 = |%c| is alphanumeric\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not alphanumeric\\n\u0026#34;, var3); } if(isalnum(var4)) { printf(\u0026#34;\\nvar4 = |%c| is alphanumeric\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not alphanumeric\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-lowercase-using-islower-function/",
        "title": "C Program to check lowercase using islower() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to check lowercase using islower() Function In this program we will check whether a character is in lowercase or not. We will be using a system defined function islower() defined under the ctype.h library. This method is used for various valid password checking options where atleast one lowercase character is mandatory.\nThe function returns 0 for any character which is not is lowercase, and it returns a value greater than or equal to 1 if the character is lowercase.\nBelow is a program on islower() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { /* As datatypes are int, hence all the variables store the ASCII values of the character on the rhs */ int var1 = \u0026#39;D\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39;a\u0026#39;; int var4 = \u0026#39; \u0026#39;; printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); printf(\u0026#34;Range of ASCII values of lowercase character is 97 to 122\\n\\n\u0026#34;); /* Returns true if the input parameter is an ASCII value within the range of a lowercase alphabet */ if(islower(var1)) { printf(\u0026#34;\\nvar1 = |%c| is lowercase character\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not lowercase character\\n\u0026#34;, var1); } if(islower(var2)) { printf(\u0026#34;\\nvar2 = |%c| is lowercase character\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not lowercase character\\n\u0026#34;, var2); } if(islower(var3)) { printf(\u0026#34;\\nvar3 = |%c| is lowercase character\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not lowercse character\\n\u0026#34;, var3); } if(islower(var4)) { printf(\u0026#34;\\nvar4 = |%c| is a lowercase character\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not a lowercase character\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-check-uppercase-using-isupper-function/",
        "title": "C Program to check uppercase using isupper() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to check uppercase using isupper() Function In this program we will check whether a character is in upper-case or not. We will be using a system defined function isupper() defined under the ctype.h library.\nThis can also be done using if-else blocks condition using the range of the ASCII values of the upper-case alphabets which is 65 to 90.\nThis method is used for various valid password checking options where atleast one upper-case character is mandatory.\nBelow is a program on isupper() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); /* As datatypes are int, hence all the variables store the ascii values of the character on the rhs */ int var1 = \u0026#39;D\u0026#39;; int var2 = 65; int var3 = \u0026#39;a\u0026#39;; int var4 = 98; printf(\u0026#34;Range of ASCII values of upper-case characters is 65 to 90\\n\\n\u0026#34;); printf(\u0026#34;\\n\\nintegers and characters are interconvertible using the ASCII values.\\n\\n\\nThe only condition is that correct format specifier shall be used \\nas per what is desired to be printed.\\n\\n\\nThe characters must be initialized in between single quotes. \\\u0026#39;\\\u0026#39;\\n\\n\u0026#34;); /* Returns true if the input parameter is an ascii value of a upper-case alphabet */ if(isupper(var1)) { printf(\u0026#34;\\nvar1 = |%c| is a upper-case character\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| is not a upper-case character\\n\u0026#34;, var1); } if(isupper(var2)) { printf(\u0026#34;\\nvar2 = |%c| is a upper-case character\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| is not a upper-case character\\n\u0026#34;, var2); } if(isupper(var3)) { printf(\u0026#34;\\nvar3 = |%c| is a upper-case character\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| is not a upper-case character\\n\u0026#34;, var3); } if(isupper(var4)) { printf(\u0026#34;\\nvar4 = |%c| is a upper-case character\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| is not a upper-case character\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-convert-characters-to-uppercase-using-the-toupper-function/",
        "title": "C Program to convert character(s) to uppercase using the toupper() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to convert character(s) to uppercase using the toupper() Function In this program we will convert all the characters of an input string to uppercase characters. We will be using a system defined function toupper() defined under the ctype.h library.\nThis can also be achieved by subtracting 32 from each lowercase character to get its equivalent uppercase format.\nBelow is the program on toupper() function. Try running the program and you will see all the explanation printed on the output screen. Yay!\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); printf(\u0026#34;putchar() is used to print a single character at a time on the console.\\n\\n\\n\u0026#34;); printf(\u0026#34;toupper() takes a character as an input and converts it into an equivalent upper-case character.\\n\\n\\n\u0026#34;); printf(\u0026#34;This can also be achieved by subtracting 32 from each lowercase character\\nto get its equivalent uppercase format. \\n\\n\\n\u0026#34;); printf(\u0026#34;As we know ASCII value of a = %d and that of A = %d.\\n\\n\\n\u0026#34;,\u0026#39;a\u0026#39;,\u0026#39;A\u0026#39;); printf(\u0026#34;\\n\\nLet\u0026#39;s first get the concept:\\n\\n\\n\u0026#34;); printf(\u0026#34;\\n\\nThe uppercase equivalent of letter \u0026#39;a\u0026#39; is %c.\\n\\n\u0026#34;,\u0026#39;a\u0026#39;-32); int aj = 0; char mj[] = \u0026#34; \\n\\nKeep learning, as what you know will never be enough!\\n\\n\u0026#34;; while(mj[aj]) // until string terminates  { // converting one character at a time  putchar(toupper(mj[aj])); aj++; } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/c-program-to-covert-character-to-lowercase-using-tolower-function/",
        "title": "C Program to covert character to lowercase using tolower() Function",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "C Program to covert character to lowercase using tolower() Function In this program we will convert all the characters of an input string into string of lowercase characters. We will be using a system defined function tolower() defined under the ctype.h library.\ntolower() takes a character as an input and converts it into an equivalent lowercase character\nputchar() is used to print a single character at a time on the console.\nBelow is the program on tolower() function, try running the program and see how the program will print all the information along with the program.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); printf(\u0026#34;putchar() is used to print a single character at a time on the console.\\n\\n\\n\u0026#34;); printf(\u0026#34;tolower() takes a character as an input and converts it into an equivalent lower-case character.\\n\\n\\n\u0026#34;); printf(\u0026#34;This can also be achieved by adding 32 to each uppercase character\\nto get its equivalent lowercase format in ASCII. \\n\\n\\n\u0026#34;); printf(\u0026#34;For example, ASCII value of a = %d and that of A = %d.\\n\\n\\n\u0026#34;, \u0026#39;a\u0026#39;, \u0026#39;A\u0026#39;); printf(\u0026#34;\\n\\nLet\u0026#39;s first get the concept:\\n\u0026#34;); printf(\u0026#34;\\n\\nThe lowercase equivalent of letter \u0026#39;A\u0026#39; is \u0026#39;%c\u0026#39; \u0026#34;,\u0026#39;A\u0026#39;+32); int aj = 0; char mj[] = \u0026#34; \\n\\n\\n\\n\\\u0026#34;KEEP LEARNING, AS WHAT YOU KNOW WILL NEVER BE ENOUGH!\\\u0026#34;\\n\\n\u0026#34;; // original uppercase string  while(mj[aj]) // until string terminates  { // converting one character at a time  putchar(tolower(mj[aj])); aj++; } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
,
    {
        "ref": "https://xvishaldongre.github.io/c_programs/using-isgraph-and-isprint-function-in-c-program/",
        "title": "Using isgraph() and isprint() Function in C Program",
        "section": "",
        "tags": ["CTYPE.H"],
        "date" : "0001.01.01",
        "body": "Using isgraph() and isprint() Function in C Program In this program we will check if a particular character can be printed or not. This functionality can be achieved by making use of the isgraph() and isprint() method.\nThough it is recommended to go through the basic difference among them, but they are almost alike. Both of them are defined under ctype.h library.\nBelow is a program on isgraph() and isprint() function.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;ctype.h\u0026gt; // to use isgraph() and isprint() method int main() { printf(\u0026#34;\\n\\n\\t\\tC Programs\\n\\n\\n\u0026#34;); /* As datatypes are int, hence all the variables store the ASCII values of the character on the rhs */ int var1 = \u0026#39;D\u0026#39;; int var2 = \u0026#39;2\u0026#39;; int var3 = \u0026#39; \\t\u0026#39;; int var4 = \u0026#39;Y\u0026#39;; /* Returns true if the input parameter is an ASCII value of an alphanumberic character */ if(isgraph(var1)) { printf(\u0026#34;\\nvar1 = |%c| can be printed\\n\u0026#34;, var1); } else { printf(\u0026#34;\\nvar1 =|%c| cannot be printed\\n\u0026#34;, var1); } if(isprint(var2)) { printf(\u0026#34;\\nvar2 = |%c| can be printed\\n\u0026#34;, var2); } else { printf(\u0026#34;\\nvar2 =|%c| can\u0026#39;t be printed\\n\u0026#34;, var2); } if(isgraph(var3)) { printf(\u0026#34;\\nvar3 = |%c| can be printed\\n\u0026#34;, var3); } else { printf(\u0026#34;\\nvar3 =|%c| can\u0026#39;t be printed\\n\u0026#34;, var3); } if(isprint(var4)) { printf(\u0026#34;\\nvar4 = |%c| can be printed\\n\u0026#34;, var4); } else { printf(\u0026#34;\\nvar4 =|%c| can\u0026#39;t be printed\\n\u0026#34;, var4); } printf(\u0026#34;\\n\\n\\t\\t\\tCoding is Fun !\\n\\n\\n\u0026#34;); return 0; } "
    }
]
